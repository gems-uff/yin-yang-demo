%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% File Name: YW+NW System
%
% Author: Saumen Dey
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%
% YW Data Id X has name Y
%%
yw_data(X,Y) :-
	data(X,Y,_).
	
%%
% Process Id X has name Y
%%
yw_process(X,Y) :-
	program(X,Y,_,_,_).	

%%
% Data map between YW and NW Link. X is the YW Data Name  
% and Y is NW data Link name. XI is the YW Data Id
% Note: YW port maintains the NW data name (TBD: further details
% to be added)
%%
ynw_data(X,Y) :-
  port(_,_,Y,_,_,XI),
  data(XI,X,_).

%%
% Note: similar connection between YW annotated process name
%       to NW process name is not captured by YW as of now.
%       Had a email exchanged with Tim and need to follow up
%       if he is planning to add it.
%
% For the time being, we can assume that all the process names
% are same for both YW and NW.
%%
ynw_process(Y,Y) :-
	yw_process(_,Y).
	
%%
%
% Capture the list of data and process that user is interested about
% it is assumed that all annotated data and process are of interest.
%
%%
node_int(X,Y,Type) :-
	ynw_data(X,Y), Type="D".
node_int(X,Y,Type) :-
	ynw_process(X,Y), Type="P".
	


%%
% Program/Block Name (i.e., process) X depends on Input 
% data Name Y (this is YW data name)
%%
yw_dep(X,Y) :-
	yw_process(X1,X),
	has_in_port(X1,P),
	port(P,_,_,_,_,Y1),
	data(Y1,Y,_).

%%
% Output data name X (YW data names) depsnds on Program/Block (i.e., 
% process) Id Y
%%
yw_dep(X,Y) :-
	yw_process(Y1,Y),
	has_out_port(Y1,P),
	port(P,_,_,_,_,X1),
	data(X1,X,_).
	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%    NW   %%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%
% Find all the user defined variables
% TrialId, ActivationId, VariableId, Id, Name, Line
%
nw_variable(T,N) :- usage(T,_,_,_,N,_).

%
% Find all the processes
% TrialId, Id, Name, Start, Finish, CallerActivationId
% 
nw_process(T,N) :- activation(T,_,N,_,_,_).


%
% All nodes - data and process
% 
nw_node(T,X) :- nw_variable(T,X).
nw_node(T,X) :- nw_process(T,X).

%
% Dep
% variable(TrialId, ActivationId, Id, Name, Line, Value, Timestamp)
%
nw_dep(T,SI,SN,SV,TI,TN,TV) :-
	dependency(T,_,_,SI,_,TI),
	variable(T,TAI,TI,TN,TL,TV,_), 
	variable(T,SAI,SI,SN,SL,SV,_).

%nw_dep(T,SI,SN,SV,TI,TN,TV) ?

nw_lin(T,SI,SN,SV,TI,TN,TV) :-
	nw_dep(T,SI,SN,SV,TI,TN,TV),
	qryL(SV).
nw_lin(T,SI,SN,SV,TI,TN,TV) :-
	nw_dep(T,SI,SN,SV,TI,TN,TV),
	nw_lin(_,_,_,_,SI,_,_).

%nw_lin(T,SI,SN,SV,TI,TN,TV) ?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%    YW+NW   %%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

yn_dep(SI,TI) :-
	nw_lin(_,SI,_,_,TI,_,_).

yn_tc(SI,TI) :- 
	yn_dep(SI,TI).
yn_tc(SI,TI) :- 
	yn_tc(SI,TS), 
	yn_dep(TS,TI).

yn_potential_dep(SI,TI) :- 
	yn_tc(SI,TI),
	node_int(_,SN,_),
	nw_lin(_,SI,SN,_,_,_,_),
	node_int(_,TN,_),
	nw_lin(_,_,_,_,TI,TN,_).

%%
%
% Naive Transitive Reduction
%
% TI1,TI2 --> 2879, 428
% SI,TI2  --> 2890, 428
% SI,TI1  --> 2890, 2879
% ==> 
% SI,TI2 is not needed as it is tc derivable
%%
yn_tcExists(SI,TI2) :- 
	yn_potential_dep(SI,TI1), 
	yn_potential_dep(SI,TI2),
	yn_potential_dep(TI1,TI2), 
	SI != TI2, SI != TI1, TI1 != TI2.
                 
yn_new_dep(SI,TI) :-  
	yn_potential_dep(SI,TI), 
	not yn_tcExists(SI,TI).   

yn_lin(SI,SN,YW_SN,SV,TI,TN,YW_TN,TV,SP,TP) :-
	nw_lin(T,SI,SN,SV,_,_,_),
	node_int(YW_SN,SN,SP),
	nw_lin(T,_,_,_,TI,TN,TV),
	node_int(YW_TN,TN,TP),
	yn_new_dep(SI,TI).

yn_self_lin(SN,SV,TN,TV) :-
	yn_lin(SI,SN,YW_SN,SV,TI,TN,YW_TN,TV,SP,TP),
	SN=TN, SV=TV.

%
% 1. some other uppper level nodes may depend on target 
% needs to be modified to source.
% 2. also, because of TR some of the arguments are missing
%


yn_lin_f(SI,SN,YW_SN,SV,TI,TN,YW_TN,TV,SP,TP) :-
	yn_lin(SI,SN,YW_SN,SV,TI,TN,YW_TN,TV,SP,TP).
	%not yn_self_lin(SN,SV,TN,TV).


yn_data(SI,SN,YW_SN,SV) :-
	yn_lin_f(SI,SN,YW_SN,SV,TI,TN,YW_TN,TV,SP,TP),
	SP="D".
yn_data(TI,TN,YW_TN,TV) :-
	yn_lin_f(SI,SN,YW_SN,SV,TI,TN,YW_TN,TV,SP,TP),
	TP="D".

yn_process(SI,SN,YW_SN,SV) :-
	yn_lin_f(SI,SN,YW_SN,SV,TI,TN,YW_TN,TV,SP,TP),
	SP="P".
yn_process(TI,TN,YW_TN,TV) :-
	yn_lin_f(SI,SN,YW_SN,SV,TI,TN,YW_TN,TV,SP,TP),
	TP="P".

yn_lin_ff(SI,YW_SN,SV,TI,YW_TN,TV) :-
	yn_lin_f(SI,SN,YW_SN,SV,TI,TN,YW_TN,TV,SP,TP).



